import unittest

from superstring import tgreedy
from common import prefix
from exact_string_matching import forward
from generator import rand

class TestTGreedy(unittest.TestCase):
  def test_overlap(self):
    self.assertEqual(tgreedy.overlap('#aba','#bab'), 2)
    self.assertEqual(tgreedy.overlap('#abab','#bab'), 3)
    self.assertEqual(tgreedy.overlap('#abb','#ab'), 0)
    self.assertEqual(tgreedy.overlap('#aa','#aa'), 1)
    self.assertEqual(tgreedy.overlap('#aab','#aab'), 0)
    self.assertEqual(tgreedy.overlap('#undergrounder', '#undergrounder'), 5)

  def test_random(self):
    l, m, A = 100, 10, ['a', 'b']
    S = []
    for _ in range(m):
      t = rand.random_word(l, A)
      S.append(t)

    ALGORITHMS = [tgreedy.greedy, tgreedy.tgreedy]
    for algo in ALGORITHMS:
      super_string = algo(S)
      for w in S:
        gen = forward.knuth_morris_pratt(super_string,
                                         w,
                                         len(super_string) - 1,
                                         len(w) - 1)
        self.assertNotEqual(None,
                            next(gen, None),
                            'Superstring generated by '
                            + str(algo) + ' does not contain the word ' + w)

  def test_example_1(self):
    S = ['#ate', '#half', '#lethal', '#alpha', '#alfalfa']
    super_string = tgreedy.tgreedy(S)
    for w in S:
      gen = forward.knuth_morris_pratt(super_string,
                                       w, len(super_string) - 1, len(w) - 1)
      self.assertNotEqual(None,
                          next(gen, None),
                          'Superstring does not contain the word ' + w)

  # example where greedy obtains better result
  def test_example_2(self):
    words = ['#cababab', '#ababababa', '#bababac']
    self.assertEqual(tgreedy.greedy(words), '#cababababac')
    # depending on how ties are broken (order in S) the resulting
    # string can be one of these two
    self.assertIn(tgreedy.tgreedy(words),
                  ['#cabababacababababa', '#ababababacabababac'])

  # example where tgreedy obtains better result
  def test_example_3(self):
    words = ['#cabb','#abbabba', '#bbdab']
    # depending on how ties are broken (order in S) the resulting
    # string can be one of these two
    self.assertIn(tgreedy.greedy(words), ['#cabbabbabbdab', '#bbdabcabbabba'])
    self.assertEqual(tgreedy.tgreedy(words), '#cabbdabbabba')
